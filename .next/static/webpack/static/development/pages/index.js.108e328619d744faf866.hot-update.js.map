{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.108e328619d744faf866.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { Component } from 'react'\r\nimport { Row, Col } from 'antd'\r\nimport { Select, Button, Input, InputNumber, Menu, Icon, Popconfirm, Affix, message } from 'antd'\r\nimport PieChart from 'react-minimal-pie-chart'\r\nimport '../assets/css/style.css'\r\n\r\nconst Option = Select.Option;\r\nconst ButtonGroup = Button.Group;\r\nconst InputGroup = Input.Group;\r\n\r\nconst datacollection = {\r\n    BINANCE: [\r\n            'BTC/USDT', 'ETH/USDT', 'LTC/USDT', 'XRP/USDT', 'ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'BTG/USDT', 'ETC/USDT', 'BCC/USDT', 'BTG/BTC', 'ETC/BTC', 'XEM/BTC', 'BCC/BTC', 'DASH/BTC'    \r\n        ],\r\n    BTCTURK: [\r\n            'BTC/TRY', 'BTC/USDT', 'ETH/TRY', 'LTC/TRY', 'XRP/TRY', 'USDT/TRY'\r\n        ],\r\n    KOINEKS: [\r\n            'BTC/TRY', 'BTC/USDT', 'ETH/TRY', 'LTC/TRY', 'XRP/TRY', 'USDT/TRY', 'DASH/TRY', 'XLM/TRY', 'BTG/TRY', 'ETC/TRY', 'XEM/TRY', 'DOGE/TRY', 'BCH/TRY'    \r\n        ]\r\n}\r\n\r\nexport default class extends Component {\r\n    state = {\r\n        affixtop : 10,\r\n        menukey: 'exchange',\r\n        selectdisble: true,\r\n\r\n        // Initial One\r\n        exchangeboxes: ['BINANCE'],\r\n        parities: ['BTC/USDT'],\r\n        balances: [100],\r\n        ratios: [1.5],\r\n\r\n        piedata: [5000, 5000],\r\n        piecolors: ['#ff7202', '#5ca536']\r\n    }\r\n    boxadd = () => {\r\n        message.success('A new box created.');\r\n        var T = this.state.exchangeboxes;\r\n        var P = this.state.parities;\r\n        var isNew = false;\r\n        for (let key of Object.keys(datacollection)) {\r\n            if (!this.state.exchangeboxes.includes(key)) {\r\n                T.push(key);\r\n                P.push(datacollection[key][0]);\r\n                isNew = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!isNew) {\r\n            T.push('BINANCE');                \r\n            P.push(datacollection['BINANCE'][0]);\r\n        }\r\n        let B = this.state.balances;\r\n        B.push(100);\r\n        let R = this.state.ratios;\r\n        R.push(1.5);\r\n        this.setState({\r\n            exchangeboxes: T,\r\n            parities: P,\r\n            balances: B,\r\n            ratios: R\r\n        })\r\n    }\r\n    boxremove = (boxkey) => {        \r\n        let T = this.state.exchangeboxes;\r\n        if (T.length == 1) {\r\n            message.warning('Sorry. The last box cannot be removed.');\r\n            return;\r\n        }\r\n        T.splice(boxkey, 1);\r\n        let P = this.state.parities;\r\n        P.splice(boxkey, 1);\r\n        let B = this.state.balances;\r\n        B.splice(boxkey, 1);\r\n        let R = this.state.ratios;\r\n        R.splice(boxkey, 1);\r\n        this.setState({\r\n            exchangeboxes: T,\r\n            parities: P,\r\n            balances: B,\r\n            ratios: R\r\n        })\r\n        message.success('The selected box removed.');\r\n    }\r\n    exchangeChange = (boxkey, value) => {\r\n        let T = this.state.exchangeboxes;\r\n        T[boxkey] = value;\r\n        let P = this.state.parities;\r\n        P[boxkey] = datacollection[value][0];\r\n        this.setState({\r\n            exchangeboxes: T,\r\n            parities: P,\r\n            selectdisble: true\r\n        });\r\n        switch (value) {\r\n            case 'BINANCE':\r\n                fetch('/binance-depth/' + datacollection[value][0].replace('/', ''))\r\n                    .then(res => res.json())\r\n                    .then(data => this.setState({\r\n                        [value + datacollection[value][0].replace('/', '_')]: data\r\n                    })\r\n                );\r\n                break;\r\n            case 'BTCTURK':\r\n                Promise.all([\r\n                    fetch('https://www.btcturk.com/api/orderbook?pairSymbol=' + datacollection[value][0].replace('/', '')),\r\n                    fetch('https://www.btcturk.com/api/trades?pairSymbol=' + datacollection[value][0].replace('/', '') + '&last=18')\r\n                ])\r\n                .then(([res1, res2]) => Promise.all([res1.json(), res2.json()]))\r\n                .then(([data1, data2]) => this.setState({\r\n                    [value + datacollection[value][0].replace('/', '_')]: data1, \r\n                    [value + datacollection[value][0].replace('/', '_') + 'history']: data2\r\n                }));\r\n                break;\r\n            case 'KOINEKS':\r\n                fetch('https://cors.io/?https://koineks.com/ticker')\r\n                    .then(res => res.json())\r\n                    .then(data => this.setState({\r\n                        [value + datacollection[value][0].replace('/', '_')]: data\r\n                    })\r\n                );\r\n                break;\r\n        }\r\n    }\r\n    parityChange = (boxkey, value) => {\r\n        let P = this.state.parities;\r\n        P[boxkey] = value;\r\n        this.setState({\r\n            parities: P,\r\n            selectdisble: true\r\n        });\r\n        switch (this.state.exchangeboxes[boxkey]) {\r\n            case 'BINANCE':\r\n                fetch('/binance-depth/' + value.replace('/', ''))\r\n                    .then(res => res.json())\r\n                    .then(data => this.setState({\r\n                        [this.state.exchangeboxes[boxkey] + value.replace('/', '_')]: data\r\n                    })\r\n                );\r\n                break;\r\n            case 'BTCTURK':\r\n                Promise.all([\r\n                    fetch('https://www.btcturk.com/api/orderbook?pairSymbol=' + value.replace('/', '')),\r\n                    fetch('https://www.btcturk.com/api/trades?pairSymbol=' + value.replace('/', '') + '&last=18')\r\n                ])\r\n                .then(([res1, res2]) => Promise.all([res1.json(), res2.json()]))\r\n                .then(([data1, data2]) => this.setState({\r\n                    [this.state.exchangeboxes[boxkey] + value.replace('/', '_')]: data1,\r\n                    [this.state.exchangeboxes[boxkey] + value.replace('/', '_') + 'history']: data2\r\n                }));\r\n                break;\r\n            case 'KOINEKS':\r\n                fetch('https://cors.io/?https://koineks.com/ticker')\r\n                    .then(res => res.json())\r\n                    .then(data => this.setState({\r\n                        [this.state.exchangeboxes[boxkey] + value.replace('/', '_')]: data\r\n                    })\r\n                );\r\n                break;\r\n        }\r\n    }\r\n    balanceChange =(boxkey, value) => {\r\n        let T = this.state.balances;\r\n        T[boxkey] = value;\r\n        this.setState({\r\n            balances: T\r\n        });\r\n    }\r\n    ratioChange =(boxkey, value) => {\r\n        let T = this.state.ratios;\r\n        T[boxkey] = value;\r\n        this.setState({\r\n            ratios: T\r\n        })\r\n    }\r\n    fiveInterval = () => {\r\n        let array = [];\r\n        for (let i=0; i<this.state.exchangeboxes.length; i++) {\r\n            array.push({[this.state.exchangeboxes[i]]: this.state.parities[i]});\r\n        }\r\n        let uniquearray = [];\r\n        for (let item of array) {\r\n            let key = Object.keys(item)[0];\r\n            let value = item[key];\r\n            let isItem = true;\r\n            for (let subitem of uniquearray) {\r\n              if (Object.keys(subitem)[0] === key && subitem[Object.keys(subitem)[0]] === value) {\r\n                isItem = false;\r\n                break;\r\n              }\r\n            }\r\n            if (isItem) {\r\n                uniquearray.push({[key]:value});\r\n            }\r\n        }\r\n        for (let item of uniquearray) {\r\n            let key = Object.keys(item)[0];\r\n            let value = item[key].replace('/', '');\r\n            switch (key) {\r\n                case 'BINANCE':\r\n                    fetch('/binance-depth/' + value)\r\n                        .then(res => res.json())\r\n                        .then(data => this.setState({\r\n                            ['BINANCE' + item[key].replace('/', '_')]: data\r\n                        }, () => {\r\n                            let T = this.state.piedata;\r\n                            T[1] = Object.keys(data.depth.bids)[7];\r\n                            console.log(Object.keys(data.depth.bids)[7])\r\n                            this.setState({\r\n                                piedata: T\r\n                            })\r\n                        })\r\n                    );\r\n                    break;\r\n                case 'BTCTURK':\r\n                    Promise.all([\r\n                        fetch('https://www.btcturk.com/api/orderbook?pairSymbol=' + value),\r\n                        fetch('https://www.btcturk.com/api/trades?pairSymbol=' + value + '&last=18')\r\n                    ])\r\n                    .then(([res1, res2]) => Promise.all([res1.json(), res2.json()]))\r\n                    .then(([data1, data2]) => this.setState({\r\n                        ['BTCTURK' + item[key].replace('/', '_')]: data1,\r\n                        ['BTCTURK' + item[key].replace('/', '_') + 'history']: data2\r\n                    }))\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                    })\r\n                    break;\r\n                case 'KOINEKS':\r\n                    fetch('https://cors.io/?https://koineks.com/ticker')\r\n                        .then(res => res.json())\r\n                        .then(data => this.setState({\r\n                            ['KOINEKS' + item[key].replace('/', '_')]: data\r\n                        })\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    componentDidMount = () => {      \r\n        Promise.all([\r\n            fetch('/binance-depth/' + datacollection['BINANCE'][0].replace('/', '')),\r\n            fetch('https://www.btcturk.com/api/orderbook?pairSymbol=' + datacollection['BTCTURK'][0].replace('/', '')),\r\n            fetch('https://www.btcturk.com/api/trades?pairSymbol=' + datacollection['BTCTURK'][0].replace('/', '') + '&last=18'),\r\n            fetch('https://cors.io/?https://koineks.com/ticker') \r\n        ])\r\n        .then(([res1, res2, res3, res4]) => Promise.all([res1.json(), res2.json(), res3.json(), res4.json()]))\r\n        .then(([data1, data2, data3, data4]) => this.setState({\r\n            ['BINANCE' + datacollection['BINANCE'][0].replace('/', '_')]: data1, \r\n            ['BTCTURK' + datacollection['BTCTURK'][0].replace('/', '_')]: data2,\r\n            ['BTCTURK' + datacollection['BTCTURK'][0].replace('/', '_') + 'history']: data3,\r\n            ['KOINEKS' + datacollection['KOINEKS'][0].replace('/', '_')]: data4\r\n        }))\r\n        .catch((error) => {\r\n            console.error(error);\r\n        })\r\n        // /binance-depth/BTCUSDT\r\n        // https://www.btcturk.com/api/orderbook?pairSymbol=BTCTRY\r\n        // https://www.btcturk.com/api/trades?pairSymbol=BTCTRY&last=18\r\n        // https://cors.io/?https://koineks.com/ticker\r\n        this.timer = setInterval(() => this.fiveInterval(), 5000)\r\n    }\r\n    componentDidUpdate = () => {\r\n        if (this.state.selectdisble)\r\n            this.setState({\r\n                selectdisble: false\r\n            })\r\n    }\r\n    componentWillUnmount = () => {\r\n        clearInterval(this.timer);\r\n    }\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////                PAGE RENDER                  ////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    \r\n    render() {        \r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////                COMPONENTS DEFINITION                  ////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//  MENU BAR  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        const Menubar = () => (\r\n            <Affix offsetTop={this.state.affixtop}>\r\n                <Menu\r\n                    selectedKeys={[this.state.menukey]}\r\n                    mode=\"horizontal\"\r\n                    theme='dark'>\r\n                    <Menu.Item key=\"exchange\">\r\n                        <a href=\"/index\">\r\n                            <Icon type=\"appstore\" />Exchange{this.state.TEST}\r\n                        </a>\r\n                    </Menu.Item>                        \r\n                    <Menu.Item key=\"currency\">\r\n                        <a href=\"/currency\">\r\n                            <Icon type=\"property-safety\" />Currency\r\n                        </a>\r\n                    </Menu.Item>                        \r\n                    <Menu.Item key=\"parity\">\r\n                        <a href=\"/parity\">\r\n                            <Icon type=\"stock\" />Parity\r\n                        </a>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Affix>\r\n        )\r\n//  HEAD COMPONENT  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        const Headbar = props => (\r\n            <Row>\r\n                <Col span={24} style={{padding:3}}>\r\n                    <ButtonGroup>\r\n                        <Button icon=\"plus\" onClick={this.boxadd} disabled={this.state.selectdisble} />\r\n                        <Popconfirm placement=\"topLeft\" title='Are you sure to delete this box?' onConfirm={() => this.boxremove(props.boxkey)} okText=\"Yes\" cancelText=\"No\">\r\n                            <Button icon=\"minus\" disabled={this.state.selectdisble} />\r\n                        </Popconfirm>\r\n                    </ButtonGroup>\r\n                    <Select value={this.state.parities[props.boxkey]} style={{ width:120,float:'right' }} onChange={(e) => this.parityChange(props.boxkey, e)} disabled={this.state.selectdisble}>\r\n                        {datacollection[props.exchange].map(parity => <Option key={parity}>{parity}</Option>)}\r\n                    </Select>\r\n                    <Select value={this.state.exchangeboxes[props.boxkey]} style={{ width:120,float:'right',marginRight:3 }} onChange={(e) => this.exchangeChange(props.boxkey, e)} disabled={this.state.selectdisble}>\r\n                        {\r\n                            Object.keys(datacollection).map(exchange => (\r\n                                <Option value={exchange} key={exchange}>{exchange}</Option>        \r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </Col>\r\n            </Row>\r\n        )\r\n//  CONTENT COMPONENT  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        const Contentbar = props => {      \r\n            const EP = props.exchange + this.state.parities[props.boxkey].replace('/', '_');\r\n            if (this.state[EP]) {\r\n                if (props.exchange == 'BINANCE') {\r\n                    var Buydata = () =>\r\n                        (Object.keys(this.state[EP].depth.bids).slice(0, 18).map((item, i) => (\r\n                            <tr className='trrow' key={i}>\r\n                                <td>{ parseFloat(item).toFixed(2) }</td>\r\n                                <td>{ parseFloat(this.state[EP].depth.bids[item]).toFixed(4) }</td>\r\n                                <td>{ (parseFloat(item).toFixed(2) * parseFloat(this.state[EP].depth.bids[item]).toFixed(4)).toFixed(2) }</td>\r\n                            </tr>\r\n                        )))\r\n                    var Selldata = () =>\r\n                        (Object.keys(this.state[EP].depth.asks).slice(0, 18).map((item, i) => (\r\n                            <tr className='trrow' key={i}>\r\n                                <td>{ parseFloat(item).toFixed(2) }</td>\r\n                                <td>{ parseFloat(this.state[EP].depth.asks[item]).toFixed(4) }</td>\r\n                                <td>{ (parseFloat(item).toFixed(2) * parseFloat(this.state[EP].depth.asks[item]).toFixed(4)).toFixed(2) }</td>\r\n                            </tr>\r\n                        )))\r\n                    if (Object.keys(this.state[EP].history).length===0 && this.state[EP].history.constructor===Object) {\r\n                        var Historydata = () => <tr><td colSpan='3'><Icon type=\"loading-3-quarters\" style={{ fontSize:20,color:'#888' }} spin/>So Lazy</td></tr>;\r\n                    } else {\r\n                        var Historydata = () =>\r\n                            (this.state[EP].history.map((item, i) => (\r\n                                <tr className='trrow' key={i}>\r\n                                    <td>{ parseFloat(item.p).toFixed(2) }</td>\r\n                                    <td>{ parseFloat(item.q).toFixed(4) }</td>\r\n                                    <td>{ (new Date(item.T*1000)).getHours()+':'+(new Date(item.T*1000)).getMinutes()+':'+(new Date(item.T*1000)).getSeconds() }</td>\r\n                                </tr>                                                        \r\n                            )))\r\n                    }\r\n                } else if (props.exchange == 'BTCTURK') {\r\n                    var Buydata = () => \r\n                        (this.state[EP].bids.slice(0, 18).map((item, i) => (\r\n                            <tr className='trrow' key={i}>\r\n                                <td>{ parseFloat(item[0]).toFixed(2) }</td>\r\n                                <td>{ parseFloat(item[1]).toFixed(4) }</td>\r\n                                <td>{ (parseFloat(item[0]).toFixed(2) * parseFloat(item[1]).toFixed(4)).toFixed(2) }</td>\r\n                            </tr>                                                        \r\n                        )))\r\n                    var Selldata = () => \r\n                        (this.state[EP].asks.slice(0, 18).map((item, i) => (\r\n                            <tr className='trrow' key={i}>\r\n                                <td>{ parseFloat(item[0]).toFixed(2) }</td>\r\n                                <td>{ parseFloat(item[1]).toFixed(4) }</td>\r\n                                <td>{ (parseFloat(item[0]).toFixed(2) * parseFloat(item[1]).toFixed(4)).toFixed(2) }</td>\r\n                            </tr>                                                        \r\n                        )))\r\n                    var Historydata = () =>\r\n                        (this.state[EP + 'history'].map((item, i) => (\r\n                            <tr className='trrow' key={i}>\r\n                                <td>{ parseFloat(item.price).toFixed(2) }</td>\r\n                                <td>{ parseFloat(item.amount).toFixed(4) }</td>\r\n                                <td>{ (new Date(item.date)).getHours()+':0'+(new Date(item.date)).getMinutes()+':0'+(new Date(item.date)).getSeconds() }</td>\r\n                            </tr>                                                        \r\n                        )))\r\n                } else if (props.exchange == 'KOINEKS') {\r\n                    let a = this.state.parities[props.boxkey];\r\n                    let b = a.split('/');\r\n                    let c = b[0];\r\n                    var Buydata = () =>\r\n                        <tr className='trrow'>\r\n                            <td>{ parseFloat(this.state[EP][c].bid).toFixed(2) }</td>\r\n                            <td>{ parseFloat(this.state[EP][c].change_amount).toFixed(4) }</td>\r\n                            <td>{ (parseFloat(this.state[EP][c].bid).toFixed(2)*parseFloat(this.state[EP][c].change_amount)).toFixed(2) }</td>\r\n                        </tr>\r\n                    var Selldata = () =>\r\n                        <tr className='trrow'>\r\n                            <td>{ parseFloat(this.state[EP][c].ask).toFixed(2) }</td>\r\n                            <td>{ parseFloat(this.state[EP][c].change_amount).toFixed(4) }</td>\r\n                            <td>{ (parseFloat(this.state[EP][c].ask).toFixed(2)*parseFloat(this.state[EP][c].change_amount)).toFixed(2) }</td>\r\n                        </tr>\r\n                    var Historydata = () => <tr><td colSpan='3'>No History Data</td></tr>;\r\n                }\r\n            } else {\r\n                var Buydata = () => <tr><td colSpan='3'><Icon type=\"loading-3-quarters\" style={{ fontSize:20,color:'#888' }} spin/></td></tr>;\r\n                var Selldata = Buydata;\r\n                var Historydata = Buydata;    \r\n            }\r\n            return (\r\n                <Row gutter={3} style={{padding:'0 3px'}}>\r\n                    <Col span={8}>\r\n                        <div style={{height:400,border:'solid #EEE 1px',textAlign:'center'}}>\r\n                            <div style={{padding:'4px 0',borderBottom:'solid #1890ff 1px',color:'#1890ff'}}>\r\n                                <Icon type=\"fork\" theme=\"outlined\" style={{marginRight:5}} />Buy Orders\r\n                            </div>\r\n                            <div style={{height:370,overflow:'auto'}}>\r\n                                <table cellPadding='0' cellSpacing='0'>\r\n                                    <tbody>\r\n                                        <tr className='trrow head'><td>Price</td><td>Amout</td><td>Total</td></tr>\r\n                                        <Buydata />\r\n                                        <tr><td colSpan='3'></td></tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div style={{height:400,border:'solid #EEE 1px',textAlign:'center'}}>\r\n                            <div style={{padding:'4px 0',borderBottom:'solid #1890ff 1px',color:'#1890ff'}}>\r\n                                <Icon type=\"fork\" theme=\"outlined\" style={{marginRight:5}} />Sell Orders\r\n                            </div>\r\n                            <div style={{height:370,overflow:'auto'}}>\r\n                                <table cellPadding='0' cellSpacing='0'>\r\n                                    <tbody>\r\n                                        <tr className='trrow head'><td>Price</td><td>Amout</td><td>Total</td></tr>\r\n                                        <Selldata />\r\n                                        <tr><td colSpan='3'></td></tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div style={{height:400,border:'solid #EEE 1px',textAlign:'center'}}>\r\n                            <div style={{padding:'4px 0',borderBottom:'solid #1890ff 1px',color:'#1890ff'}}>\r\n                                <Icon type=\"fork\" theme=\"outlined\" style={{marginRight:5}} />Order History\r\n                            </div>\r\n                            <div style={{height:370,overflow:'auto'}}>\r\n                                <table cellPadding='0' cellSpacing='0'>\r\n                                    <tbody>\r\n                                        <tr className='trrow head'><td>Price</td><td>Amout</td><td>Time</td></tr>\r\n                                        <Historydata />\r\n                                        <tr><td colSpan='3'></td></tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n//  BOTTOM COMPONENT  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        const Chartbar = props => (\r\n            <Row style={{padding:'20px 0'}}>\r\n                <Col span={7} style={{textAlign:'center'}}>\r\n                    <Pie\r\n                        data={ this.state.piedata }\r\n                        radius={ 60 }\r\n                        hole={ 0 }\r\n                        colors={ this.state.piecolors }\r\n                        strokeWidth={ 3 }\r\n                        labels={ true }\r\n                    />\r\n                </Col>\r\n                <Col span={11}>\r\n                    <ul style={{height:27,marginBottom:0}}>\r\n                        <li style={{width:'50%',float:'left',whiteSpace:'nowrap',overflow:'hidden',textOverflow:'ellipsis'}}>\r\n                            balance warning\r\n                        </li>\r\n                        <li style={{width:'50%',float:'left'}}>\r\n                        <InputNumber\r\n                            value={this.state.balances[props.boxkey]}\r\n                            formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n                            style={{width:'100%'}}\r\n                            size='small'\r\n                            onChange={(e) => this.balanceChange(props.boxkey, e)}\r\n                        />    \r\n                        </li>\r\n                    </ul>\r\n                    <ul style={{height:27,marginBottom:0}}>\r\n                        <li style={{width:'50%',float:'left',whiteSpace:'nowrap',overflow:'hidden',textOverflow:'ellipsis'}}>\r\n                            ratio warning %\r\n                        </li>\r\n                        <li style={{width:'50%',float:'left'}}>\r\n                        <InputNumber\r\n                            value={this.state.ratios[props.boxkey]}\r\n                            min={0}\r\n                            max={100}\r\n                            formatter={value => `${value}%`}\r\n                            parser={value => value.replace('%', '')}\r\n                            step={.1}\r\n                            style={{width:'100%'}}\r\n                            size='small'\r\n                            onChange={(e) => this.ratioChange(props.boxkey, e)}\r\n                        />\r\n                        </li>\r\n                    </ul>\r\n                    <ul style={{height:27,marginBottom:0}}>\r\n                        <li style={{width:'50%',float:'left',whiteSpace:'nowrap',overflow:'hidden',textOverflow:'ellipsis'}}>\r\n                            API key\r\n                        </li>\r\n                        <li style={{width:'50%',float:'left'}}>\r\n                            <Input size='small'/>\r\n                        </li>\r\n                    </ul>\r\n                    <ul style={{height:27,marginBottom:0}}>\r\n                        <li style={{width:'50%',float:'left',whiteSpace:'nowrap',overflow:'hidden',textOverflow:'ellipsis'}}>\r\n                            Secret key\r\n                        </li>\r\n                        <li style={{width:'50%',float:'left'}}>\r\n                            <Input size='small'/>\r\n                        </li>\r\n                    </ul>\r\n                    <InputGroup compact>\r\n                        <Input placeholder={this.state.parities[props.boxkey].split('/')[0] + ' key'} style={{width:'50%'}}/>\r\n                        <Input placeholder={this.state.parities[props.boxkey].split('/')[1] + ' key'} style={{width:'50%'}}/>\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col span={6}>\r\n                    <PieChart style={{width:'55%',margin:'auto'}}\r\n                        data={[                                                                                                            \r\n                            { title: 'One', value: 8, color: '#006fc1' },\r\n                            { title: 'Three', value: 10, color: '#ffc103' },\r\n                    ]} />\r\n                </Col>\r\n            </Row>\r\n        )\r\n//  EXCHANGE BOX  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        const Exchangebox = props => (\r\n            <Col span={8} className=\"exchangebox\">\r\n                <div>\r\n                    <Headbar exchange={props.exchange} boxkey={props.boxkey} />\r\n                    <Contentbar exchange={props.exchange} boxkey={props.boxkey} />\r\n                    <Chartbar exchange={props.exchange} boxkey={props.boxkey} />\r\n                </div>\r\n            </Col>\r\n        )\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////                REURN VIEW                  ////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        return (                \r\n            <div style={{padding:10}}>\r\n                <Row>\r\n                    <Menubar />\r\n                </Row>\r\n                <Row gutter={6} style={{paddingTop:5}}>\r\n                    {\r\n                        this.state.exchangeboxes.map((box, i) => (\r\n                            <Exchangebox key={i} exchange={box} boxkey={i}/>    \r\n                        ))\r\n                    }\r\n                </Row>                \r\n            </div>\r\n          )\r\n      }\r\n  }\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////                PIE CHART                  ////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nfunction getAnglePoint(startAngle, endAngle, radius, x, y) {\r\n\tvar x1, y1, x2, y2;\r\n\r\n\tx1 = x + radius * Math.cos(Math.PI * startAngle / 180);\r\n\ty1 = y + radius * Math.sin(Math.PI * startAngle / 180);\r\n\tx2 = x + radius * Math.cos(Math.PI * endAngle / 180);\r\n\ty2 = y + radius * Math.sin(Math.PI * endAngle / 180);\r\n\r\n\treturn { x1, y1, x2, y2 };\r\n}\r\n\r\nconst Pie = (props) => {\t\r\n    var colors = props.colors,\r\n        colorsLength = colors.length,\r\n        labels = props.labels,\r\n        hole = props.hole,\r\n        radius = props.radius,\r\n        diameter = radius * 2,\r\n        sum, startAngle = null;\r\n\t\tsum = props.data.reduce(function (carry, current) { return carry + current }, 0);\r\n        startAngle = 0;\r\n\t\treturn (\r\n\t\t\t<svg width={ diameter } height={ diameter } viewBox={ '0 0 ' + diameter + ' ' + diameter } version=\"1.1\">\r\n\t\t\t\t{ props.data.map(function (slice, sliceIndex) {\r\n\t\t\t\t\tvar angle, nextAngle, percent;\r\n\t\t\t\t\tnextAngle = startAngle;\r\n\t\t\t\t\tangle = (slice / sum) * 360;\r\n\t\t\t\t\tpercent = (slice / sum) * 100;\r\n                    startAngle += angle;\r\n\t\t\t\t\treturn <Slice\r\n                        key={ sliceIndex }\r\n                        key1={ sliceIndex }\r\n\t\t\t\t\t\tvalue={ slice }\r\n\t\t\t\t\t\tpercent={ props.percent }\r\n\t\t\t\t\t\tpercentValue={ percent.toFixed(1) }\r\n\t\t\t\t\t\tstartAngle={ nextAngle }\r\n\t\t\t\t\t\tangle={ angle }\r\n\t\t\t\t\t\tradius={ radius }\r\n\t\t\t\t\t\thole={ radius - hole }\r\n\t\t\t\t\t\ttrueHole={ hole }\r\n\t\t\t\t\t\tshowLabel= { labels }\r\n\t\t\t\t\t\tfill={ colors[sliceIndex % colorsLength] }\r\n\t\t\t\t\t\tstroke={ props.stroke }\r\n\t\t\t\t\t\tstrokeWidth={ props.strokeWidth }\r\n                    />\r\n\t\t\t\t}) }\r\n\t\t\t</svg>\r\n\t\t);\r\n}\r\nclass Slice extends React.Component {\r\n\tstate = {\r\n        path: '',\r\n        x: 0,\r\n        y: 0\r\n\t}\r\n\tcomponentWillReceiveProps = () => {\r\n\t\tthis.setState({ path: '' });\r\n\t\tthis.animate();\r\n\t}\r\n\tcomponentDidMount = () => {\r\n\t\tthis.animate();\r\n\t}\r\n\tanimate = () => {\r\n\t\tthis.draw(0);\r\n\t}\r\n\tdraw = (s) => {\r\n\t\tvar p = this.props, path = [], a, b, c, self = this, step;\r\n\t\tstep = p.angle / (37.5 / 2);\r\n\t\tif (s + step > p.angle) {\r\n\t\t\ts = p.angle;\r\n\t\t}\r\n\t\ta = getAnglePoint(p.startAngle, p.startAngle + s, p.radius, p.radius, p.radius);\r\n        b = getAnglePoint(p.startAngle, p.startAngle + s, p.radius - p.hole, p.radius, p.radius);        \r\n\t\tpath.push('M' + a.x1 + ',' + a.y1);\r\n\t\tpath.push('A'+ p.radius +','+ p.radius +' 0 '+ (s > 180 ? 1 : 0) +',1 '+ a.x2 + ',' + a.y2);\r\n\t\tpath.push('L' + b.x2 + ',' + b.y2);\r\n\t\tpath.push('A'+ (p.radius- p.hole) +','+ (p.radius- p.hole) +' 0 '+ (s > 180 ? 1 : 0) +',0 '+ b.x1 + ',' + b.y1);\r\n\t\tpath.push('Z');\r\n\t\tthis.setState({ path: path.join(' ') });\r\n\t\tif (s < p.angle) {\r\n            self.draw(s + step);\r\n\t\t} else if (p.showLabel) {\r\n\t\t\tc = getAnglePoint(p.startAngle, p.startAngle + (p.angle / 2), (p.radius / 2 + p.trueHole / 2), p.radius, p.radius);\r\n\t\t\tthis.setState({\r\n\t\t\t\tx: c.x2,\r\n\t\t\t\ty: c.y2\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<g overflow=\"hidden\">\r\n\t\t\t\t<path\r\n\t\t\t\t\td={ this.state.path }\r\n\t\t\t\t\tfill={ this.props.fill }\r\n\t\t\t\t\tstroke={ this.props.stroke }\r\n\t\t\t\t\tstrokeWidth={ this.props.strokeWidth ? this.props.strokeWidth : 3 }\r\n\t\t\t\t\t />\r\n\t\t\t\t{ this.props.showLabel && this.props.percentValue > 5 ?\r\n\t\t\t\t\t<text x={ this.state.x } y={ this.state.y } fill=\"#fff\" textAnchor=\"middle\">\r\n\t\t\t\t\t\t{ this.props.key1 == 1 ? this.props.value + '$' : 'BTC' }\r\n\t\t\t\t\t</text>\r\n\t\t\t\t: null }\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AAPA;AACA;;;;;;;;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAZA;AACA;AAaA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AA3BA;AA6BA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AA3BA;AA6BA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AApBA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AATA;AAWA;AACA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AArCA;AAvBA;AACA;AAmBA;AAAA;AA0CA;AACA;AACA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAlBA;AACA;AACA;AAuBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AADA;AAdA;AACA;AACA;AAqBA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AADA;AACA;AAOA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AADA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AADA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AADA;AACA;AAOA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AADA;AACA;AAOA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AADA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AACA;AAKA;AAAA;AACA;AAAA;AADA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AANA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AATA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AApEA;AACA;AACA;AA2EA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AAOA;;;;AAviBA;AA2iBA;AACA;AACA;AACA;;;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAxDA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}